name: Simulate User Activity (Payments - payments-service)

on:
  schedule:
    - cron: "17 13,19 * * 1-5"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  simulate:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      # Candidate PAT mirrors
      S_PAT_TAYLOR:   ${{ secrets.PAT_TAYLOR }}
      S_PAT_CATHLEEN: ${{ secrets.PAT_CATHLEEN }}
      S_PAT_SALLY:    ${{ secrets.PAT_SALLY }}
      S_PAT_JEFF:     ${{ secrets.PAT_JEFF }}
      S_PAT_STEPH:    ${{ secrets.PAT_STEPH }}
      S_PAT_CHASE:    ${{ secrets.PAT_CHASE }}
      S_PAT_MARION:   ${{ secrets.PAT_MARION }}
      S_PAT_ROSHNI:   ${{ secrets.PAT_ROSHNI }}
      S_PAT_GIANPAUL: ${{ secrets.PAT_GIANPAUL }}
      S_PAT_MIKE: ${{ secrets.PAT_MIKE }}

      # Team actors (Payments)
      ACTORS: |
        [
          {"username":"cathleen","git_name":"Cathleen Wright","git_email":"cathleen@cortex.io","pat_secret":"PAT_CATHLEEN"},
          {"username":"sally","git_name":"Sally","git_email":"sally@cortex.io","pat_secret":"PAT_SALLY"},
          {"username":"taylor","git_name":"Taylor Schmidt","git_email":"taylor@cortex.io","pat_secret":"PAT_TAYLOR"},
          {"username":"mike","git_name":"Mike Rodriguez","git_email":"mike.rodriguez@cortex.io","pat_secret":"PAT_MIKE"}
        ]

      # Cross-repo reviewer pool
      REVIEWER_CANDIDATES: |
        ["PAT_TAYLOR","PAT_CATHLEEN","PAT_SALLY","PAT_JEFF","PAT_STEPH","PAT_CHASE","PAT_MARION","PAT_ROSHNI","PAT_GIANPAUL, PAT_MIKE"]

      # Delays (minutes)
      FIRST_REVIEW_MIN: "25"
      FIRST_REVIEW_MAX: "120"
      APPROVAL_MIN: "15"
      APPROVAL_MAX: "120"

    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Pick one random actor (only from tokens available)
        id: pick
        shell: bash
        run: |
          eligible=()
          len=$(jq 'length' <<< "${ACTORS}")
          for i in $(seq 0 $((len-1))); do
            obj=$(jq -r ".[$i]" <<< "${ACTORS}")
            sec=$(jq -r '.pat_secret' <<< "$obj")
            tok_var="S_${sec}"
            tok="${!tok_var}"
            [ -n "$tok" ] && eligible+=("$i")
          done
          if [ "${#eligible[@]}" -eq 0 ]; then echo "pat_secret=" >> $GITHUB_OUTPUT; exit 0; fi
          pick_idx="${eligible[$((RANDOM % ${#eligible[@]}))]}"
          obj=$(jq -r ".[$pick_idx]" <<< "${ACTORS}")
          echo "username=$(jq -r '.username' <<< "$obj")"   >> $GITHUB_OUTPUT
          echo "git_name=$(jq -r '.git_name' <<< "$obj")"   >> $GITHUB_OUTPUT
          echo "git_email=$(jq -r '.git_email' <<< "$obj")" >> $GITHUB_OUTPUT
          echo "pat_secret=$(jq -r '.pat_secret' <<< "$obj")" >> $GITHUB_OUTPUT

      - name: Resolve actor token (skip if missing)
        id: auth
        shell: bash
        run: |
          if [ -z "${{ steps.pick.outputs.pat_secret }}" ]; then echo "skip=true" >> $GITHUB_OUTPUT; exit 0; fi
          PAT_SECRET="${{ steps.pick.outputs.pat_secret }}"
          TOKEN_VAR="S_${PAT_SECRET}"
          TOKEN="${!TOKEN_VAR}"
          if [ -z "$TOKEN" ]; then echo "skip=true" >> $GITHUB_OUTPUT; exit 0; fi
          echo "$TOKEN" | gh auth login --with-token
          echo "GH_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "AUTHOR=${{ steps.pick.outputs.git_name }}" >> $GITHUB_ENV
          echo "EMAIL=${{ steps.pick.outputs.git_email }}" >> $GITHUB_ENV
          echo "BRANCH=sim/${{ steps.pick.outputs.username }}-$(date +%s)" >> $GITHUB_ENV

      - name: Stop if no actor token
        if: steps.auth.outputs.skip == 'true'
        run: echo "No valid actor token; ending run."

      - name: Pick scenario
        id: scenario
        if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          scenarios=("OPEN_ONLY" "COMMENT_REVIEW" "APPROVE" "MERGE" "CLOSE_UNMERGED" "BIG_DIFF" "SMALL_DIFF")
          weights=(4 3 2 2 1 1 2)
          total=0; for w in "${weights[@]}"; do total=$((total+w)); done
          r=$((RANDOM % total)); acc=0
          for i in "${!scenarios[@]}"; do acc=$((acc+weights[i])); if [ $r -lt $acc ]; then echo "value=${scenarios[i]}" >> $GITHUB_OUTPUT; break; fi; done

      - name: Commit change (README preferred; vary size)
        if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          set -e
          git config user.name "${AUTHOR}"
          git config user.email "${EMAIL}"
          BRANCH="${BRANCH}"
          if [ $((RANDOM % 10)) -lt 3 ]; then
            existing=$(git ls-remote --heads origin "sim/${{ steps.pick.outputs.username }}-*" | head -n1 | awk '{print $2}' | cut -d/ -f3-)
            if [ -n "$existing" ]; then git fetch origin "$existing"; git checkout -b "$existing" "origin/$existing"; BRANCH="$existing"; export BRANCH; echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"; else git checkout -b "$BRANCH"; fi
          else
            git checkout -b "$BRANCH"
          fi
          touch README.md
          mkdir -p changelogs
          if [ "${{ steps.scenario.outputs.value }}" = "BIG_DIFF" ]; then
            f="changelogs/${{ steps.pick.outputs.username }}-$(date +%s).md"; for i in $(seq 1 $((150 + RANDOM % 350))); do echo "- change $i at $(date -u)"; done > "$f"
          else
            echo "Update by ${AUTHOR} at $(date -u)" >> README.md
            if [ $((RANDOM % 6)) -eq 0 ] && [ -f "changelogs/old-${{ steps.pick.outputs.username }}.md" ]; then git rm -f "changelogs/old-${{ steps.pick.outputs.username }}.md" || true; fi
          fi
          git add -A
          git commit -m "feat: sim update by ${AUTHOR} at $(date -u)"
          git push -u origin HEAD
          set +e

      - name: Maybe open a PR
        id: openpr
        if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          if [ $((RANDOM % 10)) -lt 7 ]; then
            URL=$(gh pr create --title "Sim PR by ${AUTHOR}" --body "Automated demo PR at $(date -u). Scenario: ${{ steps.scenario.outputs.value }}" --base main --head "${BRANCH}" --draft=false || true)
            echo "url=$URL" >> $GITHUB_OUTPUT
          fi

      - name: Find an open PR to act on
        id: pr
        if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          if [ -n "${{ steps.openpr.outputs.url }}" ]; then NUM=$(gh pr view "${{ steps.openpr.outputs.url }}" --json number -q .number); else NUM=$(gh pr list --state open --author "${AUTHOR}" --json number,createdAt -q 'sort_by(.createdAt) | .[0].number'); fi
          if [ "$NUM" = "null" ] || [ -z "$NUM" ]; then echo "number=" >> $GITHUB_OUTPUT; else echo "number=$NUM" >> $GITHUB_OUTPUT; fi

      - name: Decide review/approval delays
        id: delays
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          rr() { local lo="$1" hi="$2"; echo $(( lo + RANDOM % (hi - lo + 1) )); }
          FIRST_REVIEW_DELAY=$(rr "${FIRST_REVIEW_MIN:-25}" "${FIRST_REVIEW_MAX:-120}")
          APPROVAL_DELAY=$(rr "${APPROVAL_MIN:-15}" "${APPROVAL_MAX:-120}")
          echo "first_review_minutes=$FIRST_REVIEW_DELAY" >> $GITHUB_OUTPUT
          echo "approval_minutes=$APPROVAL_DELAY" >> $GITHUB_OUTPUT

      - name: Pick reviewer secret name
        id: pick_reviewer
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          pool=$(jq -r 'map(select(. != "'${{ steps.pick.outputs.pat_secret }}'"))' <<< "${REVIEWER_CANDIDATES}")
          chosen=""; for i in {1..10}; do len=$(jq 'length' <<< "$pool"); [ "$len" -eq 0 ] && break; idx=$((RANDOM % len)); sec=$(jq -r ".[$idx]" <<< "$pool"); tok_var="S_${sec}"; tok="${!tok_var}"; if [ -n "$tok" ]; then chosen="$sec"; break; fi; done
          echo "secret=$chosen" >> $GITHUB_OUTPUT

      - name: Wait, then leave first review (COMMENT)
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number && steps.pick_reviewer.outputs.secret
        shell: bash
        run: |
          mins=${{ steps.delays.outputs.first_review_minutes }}
          echo "Sleeping ${mins} minutes before first review..."; sleep $(( mins * 60 ))
          tok_var="S_${{ steps.pick_reviewer.outputs.secret }}"; REVIEWER_TOKEN="${!tok_var}"; [ -z "$REVIEWER_TOKEN" ] && exit 0
          ORIGINAL_GH_TOKEN="$GH_TOKEN"; unset GH_TOKEN
          echo "$REVIEWER_TOKEN" | gh auth login --with-token
          gh pr review ${{ steps.pr.outputs.number }} --comment --body "First review pass at $(date -u)"
          gh auth logout -h github.com -y || true
          echo "$ORIGINAL_GH_TOKEN" | gh auth login --with-token; echo "GH_TOKEN=$ORIGINAL_GH_TOKEN" >> $GITHUB_ENV

      - name: Pick approver secret name (can be same or different)
        id: pick_approver
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          pool=$(jq -r 'map(select(. != "'${{ steps.pick.outputs.pat_secret }}'"))' <<< "${REVIEWER_CANDIDATES}")
          chosen=""; for i in {1..10}; do len=$(jq 'length' <<< "$pool"); [ "$len" -eq 0 ] && break; idx=$((RANDOM % len)); sec=$(jq -r ".[$idx]" <<< "$pool"); tok_var="S_${sec}"; tok="${!tok_var}"; if [ -n "$tok" ]; then chosen="$sec"; break; fi; done
          if [ -z "$chosen" ] && [ -n "${{ steps.pick_reviewer.outputs.secret }}" ]; then tok_var="S_${{ steps.pick_reviewer.outputs.secret }}"; tok="${!tok_var}"; [ -n "$tok" ] && chosen="${{ steps.pick_reviewer.outputs.secret }}"; fi
          echo "secret=$chosen" >> $GITHUB_OUTPUT

      - name: Wait, then maybe approve
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number && steps.pick_approver.outputs.secret
        shell: bash
        run: |
          if [ $((RANDOM % 10)) -ge 7 ]; then echo "Skipping approval."; exit 0; fi
          mins=${{ steps.delays.outputs.approval_minutes }}
          echo "Sleeping ${mins} minutes before approval..."; sleep $(( mins * 60 ))
          tok_var="S_${{ steps.pick_approver.outputs.secret }}"; APPROVER_TOKEN="${!tok_var}"; [ -z "$APPROVER_TOKEN" ] && exit 0
          ORIGINAL_GH_TOKEN="$GH_TOKEN"; unset GH_TOKEN
          echo "$APPROVER_TOKEN" | gh auth login --with-token
          gh pr review ${{ steps.pr.outputs.number }} --approve --body "Approval at $(date -u)"
          gh auth logout -h github.com -y || true
          echo "$ORIGINAL_GH_TOKEN" | gh auth login --with-token; echo "GH_TOKEN=$ORIGINAL_GH_TOKEN" >> $GITHUB_ENV

      - name: Diagnose mergeability
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          # Use only fields supported by `gh pr view --json`
          gh pr view ${{ steps.pr.outputs.number }} \
            --json state,mergeable,mergeStateStatus,reviewDecision,baseRefName,isDraft \
            -q '
              "state=" + .state + "\n" +
              "mergeable=" + (.mergeable|tostring) + "\n" +
              "mergeStateStatus=" + .mergeStateStatus + "\n" +
              "reviewDecision=" + (.reviewDecision|tostring) + "\n" +
              "baseRefName=" + .baseRefName + "\n" +
              "isDraft=" + (.isDraft|tostring)
            '


      - name: Maybe (auto) merge PR
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          if [ $((RANDOM % 10)) -lt 7 ]; then
            set +e; gh pr merge ${{ steps.pr.outputs.number }} --merge --auto --delete-branch; set -e
          else
            echo "Skipping merge attempt."
          fi

      - name: Maybe close without merge
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          if [ $((RANDOM % 20)) -lt 3 ]; then gh pr close ${{ steps.pr.outputs.number }} --delete-branch; fi
