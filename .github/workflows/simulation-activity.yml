name: Simulate User Activity (Payments - Payments Service)

on:
  schedule:
    - cron: "10 14,18,22 * * 1-5"   # 3Ã— per weekday
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  simulate:
    runs-on: ubuntu-latest

    env:
      S_PAT_TAYLOR:   ${{ secrets.PAT_TAYLOR }}
      S_PAT_CATHLEEN: ${{ secrets.PAT_CATHLEEN }}
      S_PAT_SALLY:    ${{ secrets.PAT_SALLY }}
      S_PAT_JEFF:     ${{ secrets.PAT_JEFF }}
      S_PAT_STEPH:    ${{ secrets.PAT_STEPH }}
      S_PAT_CHASE:    ${{ secrets.PAT_CHASE }}
      S_PAT_MARION:   ${{ secrets.PAT_MARION }}
      S_PAT_ROSHNI:   ${{ secrets.PAT_ROSHNI }}
      S_PAT_GIANPAUL: ${{ secrets.PAT_GIANPAUL }}

      ACTORS: |
        [
          {"username":"cathleen","git_name":"Cathleen Wright","git_email":"cathleen@cortex.io","pat_secret":"PAT_CATHLEEN"},
          {"username":"sally","git_name":"Sally","git_email":"sally@cortex.io","pat_secret":"PAT_SALLY"},
          {"username":"taylor","git_name":"Taylor Schmidt","git_email":"taylor@cortex.io","pat_secret":"PAT_TAYLOR"}
        ]

      REVIEWER_CANDIDATES: |
        ["PAT_TAYLOR","PAT_CATHLEEN","PAT_SALLY","PAT_JEFF","PAT_STEPH","PAT_CHASE","PAT_MARION","PAT_ROSHNI","PAT_GIANPAUL"]

    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update -y && sudo apt-get install -y jq
      - id: pick
        run: |
          len=$(jq 'length' <<< "${ACTORS}"); [ "$len" -eq 0 ] && echo chosen= >> $GITHUB_OUTPUT && exit 0
          idx=$((RANDOM % len)); obj=$(jq -r ".[$idx]" <<< "${ACTORS}")
          echo username=$(jq -r '.username' <<< "$obj") >> $GITHUB_OUTPUT
          echo git_name=$(jq -r '.git_name' <<< "$obj") >> $GITHUB_OUTPUT
          echo git_email=$(jq -r '.git_email' <<< "$obj") >> $GITHUB_OUTPUT
          echo pat_secret=$(jq -r '.pat_secret' <<< "$obj") >> $GITHUB_OUTPUT
      - id: auth
        run: |
          [ -z "${{ steps.pick.outputs.pat_secret }}" ] && echo skip=true >> $GITHUB_OUTPUT && exit 0
          PAT_SECRET="${{ steps.pick.outputs.pat_secret }}"; TOKEN_VAR="S_${PAT_SECRET}"; TOKEN="${!TOKEN_VAR}"
          [ -z "$TOKEN" ] && echo skip=true >> $GITHUB_OUTPUT && exit 0
          echo "$TOKEN" | gh auth login --with-token
          echo GH_TOKEN=$TOKEN >> $GITHUB_ENV
          echo AUTHOR=${{ steps.pick.outputs.git_name }} >> $GITHUB_ENV
          echo EMAIL=${{ steps.pick.outputs.git_email }} >> $GITHUB_ENV
          echo BRANCH=sim/${{ steps.pick.outputs.username }}-$(date +%s) >> $GITHUB_ENV
      - if: steps.auth.outputs.skip == 'true'
        run: echo "No valid actor token; ending run."
      - id: scenario
        if: steps.auth.outputs.skip != 'true'
        run: |
          scenarios=("OPEN_ONLY" "COMMENT_REVIEW" "APPROVE" "MERGE" "CLOSE_UNMERGED" "BIG_DIFF" "SMALL_DIFF"); weights=(4 3 2 2 1 1 2)
          total=0; for w in "${weights[@]}"; do total=$((total+w)); done
          r=$((RANDOM % total)); acc=0; for i in "${!scenarios[@]}"; do acc=$((acc+weights[i])); if [ $r -lt $acc ]; then echo value=${scenarios[i]} >> $GITHUB_OUTPUT; break; fi; done
      - if: steps.auth.outputs.skip != 'true'
        shell: bash
        run: |
          set -e
          git config user.name "${AUTHOR}"; git config user.email "${EMAIL}"
          BRANCH="${BRANCH}"
          if [ $((RANDOM % 10)) -lt 3 ]; then existing=$(git ls-remote --heads origin "sim/${{ steps.pick.outputs.username }}-*" | head -n1 | awk '{print $2}' | cut -d/ -f3-); if [ -n "$existing" ]; then git fetch origin "$existing"; git checkout -b "$existing" "origin/$existing"; BRANCH="$exi*
